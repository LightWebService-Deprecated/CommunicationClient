/*
LightWebService Authentication Server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegisterRequest struct for RegisterRequest
type RegisterRequest struct {
	// Email Address
	UserEmail *string `json:"userEmail,omitempty"`
	// User Nickname
	UserNickName *string `json:"userNickName,omitempty"`
	// User Password
	UserPassword *string `json:"userPassword,omitempty"`
}

// NewRegisterRequest instantiates a new RegisterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterRequest() *RegisterRequest {
	this := RegisterRequest{}
	return &this
}

// NewRegisterRequestWithDefaults instantiates a new RegisterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterRequestWithDefaults() *RegisterRequest {
	this := RegisterRequest{}
	return &this
}

// GetUserEmail returns the UserEmail field value if set, zero value otherwise.
func (o *RegisterRequest) GetUserEmail() string {
	if o == nil || o.UserEmail == nil {
		var ret string
		return ret
	}
	return *o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetUserEmailOk() (*string, bool) {
	if o == nil || o.UserEmail == nil {
		return nil, false
	}
	return o.UserEmail, true
}

// HasUserEmail returns a boolean if a field has been set.
func (o *RegisterRequest) HasUserEmail() bool {
	if o != nil && o.UserEmail != nil {
		return true
	}

	return false
}

// SetUserEmail gets a reference to the given string and assigns it to the UserEmail field.
func (o *RegisterRequest) SetUserEmail(v string) {
	o.UserEmail = &v
}

// GetUserNickName returns the UserNickName field value if set, zero value otherwise.
func (o *RegisterRequest) GetUserNickName() string {
	if o == nil || o.UserNickName == nil {
		var ret string
		return ret
	}
	return *o.UserNickName
}

// GetUserNickNameOk returns a tuple with the UserNickName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetUserNickNameOk() (*string, bool) {
	if o == nil || o.UserNickName == nil {
		return nil, false
	}
	return o.UserNickName, true
}

// HasUserNickName returns a boolean if a field has been set.
func (o *RegisterRequest) HasUserNickName() bool {
	if o != nil && o.UserNickName != nil {
		return true
	}

	return false
}

// SetUserNickName gets a reference to the given string and assigns it to the UserNickName field.
func (o *RegisterRequest) SetUserNickName(v string) {
	o.UserNickName = &v
}

// GetUserPassword returns the UserPassword field value if set, zero value otherwise.
func (o *RegisterRequest) GetUserPassword() string {
	if o == nil || o.UserPassword == nil {
		var ret string
		return ret
	}
	return *o.UserPassword
}

// GetUserPasswordOk returns a tuple with the UserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterRequest) GetUserPasswordOk() (*string, bool) {
	if o == nil || o.UserPassword == nil {
		return nil, false
	}
	return o.UserPassword, true
}

// HasUserPassword returns a boolean if a field has been set.
func (o *RegisterRequest) HasUserPassword() bool {
	if o != nil && o.UserPassword != nil {
		return true
	}

	return false
}

// SetUserPassword gets a reference to the given string and assigns it to the UserPassword field.
func (o *RegisterRequest) SetUserPassword(v string) {
	o.UserPassword = &v
}

func (o RegisterRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserEmail != nil {
		toSerialize["userEmail"] = o.UserEmail
	}
	if o.UserNickName != nil {
		toSerialize["userNickName"] = o.UserNickName
	}
	if o.UserPassword != nil {
		toSerialize["userPassword"] = o.UserPassword
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterRequest struct {
	value *RegisterRequest
	isSet bool
}

func (v NullableRegisterRequest) Get() *RegisterRequest {
	return v.value
}

func (v *NullableRegisterRequest) Set(val *RegisterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterRequest(val *RegisterRequest) *NullableRegisterRequest {
	return &NullableRegisterRequest{value: val, isSet: true}
}

func (v NullableRegisterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


