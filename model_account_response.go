/*
LightWebService Authentication Server

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AccountResponse struct for AccountResponse
type AccountResponse struct {
	// Account Unique ID
	Id *string `json:"id,omitempty"`
	// Email Address
	Email *string `json:"email,omitempty"`
	// User Nickname
	NickName *string `json:"nickName,omitempty"`
	// Account State - Created, Ready, Revoked, DroppedOut, Error
	AccountState *string `json:"accountState,omitempty"`
	// Account roles - like admin, and normal user
	Roles []string `json:"roles,omitempty"`
}

// NewAccountResponse instantiates a new AccountResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountResponse() *AccountResponse {
	this := AccountResponse{}
	return &this
}

// NewAccountResponseWithDefaults instantiates a new AccountResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountResponseWithDefaults() *AccountResponse {
	this := AccountResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccountResponse) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccountResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccountResponse) SetId(v string) {
	o.Id = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AccountResponse) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AccountResponse) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AccountResponse) SetEmail(v string) {
	o.Email = &v
}

// GetNickName returns the NickName field value if set, zero value otherwise.
func (o *AccountResponse) GetNickName() string {
	if o == nil || o.NickName == nil {
		var ret string
		return ret
	}
	return *o.NickName
}

// GetNickNameOk returns a tuple with the NickName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetNickNameOk() (*string, bool) {
	if o == nil || o.NickName == nil {
		return nil, false
	}
	return o.NickName, true
}

// HasNickName returns a boolean if a field has been set.
func (o *AccountResponse) HasNickName() bool {
	if o != nil && o.NickName != nil {
		return true
	}

	return false
}

// SetNickName gets a reference to the given string and assigns it to the NickName field.
func (o *AccountResponse) SetNickName(v string) {
	o.NickName = &v
}

// GetAccountState returns the AccountState field value if set, zero value otherwise.
func (o *AccountResponse) GetAccountState() string {
	if o == nil || o.AccountState == nil {
		var ret string
		return ret
	}
	return *o.AccountState
}

// GetAccountStateOk returns a tuple with the AccountState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetAccountStateOk() (*string, bool) {
	if o == nil || o.AccountState == nil {
		return nil, false
	}
	return o.AccountState, true
}

// HasAccountState returns a boolean if a field has been set.
func (o *AccountResponse) HasAccountState() bool {
	if o != nil && o.AccountState != nil {
		return true
	}

	return false
}

// SetAccountState gets a reference to the given string and assigns it to the AccountState field.
func (o *AccountResponse) SetAccountState(v string) {
	o.AccountState = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *AccountResponse) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetRolesOk() ([]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *AccountResponse) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *AccountResponse) SetRoles(v []string) {
	o.Roles = v
}

func (o AccountResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.NickName != nil {
		toSerialize["nickName"] = o.NickName
	}
	if o.AccountState != nil {
		toSerialize["accountState"] = o.AccountState
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableAccountResponse struct {
	value *AccountResponse
	isSet bool
}

func (v NullableAccountResponse) Get() *AccountResponse {
	return v.value
}

func (v *NullableAccountResponse) Set(val *AccountResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountResponse(val *AccountResponse) *NullableAccountResponse {
	return &NullableAccountResponse{value: val, isSet: true}
}

func (v NullableAccountResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


